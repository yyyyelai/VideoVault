name: Build Tauri App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check system info (Windows)
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Node version: $(node --version)"
        Write-Host "NPM version: $(npm --version)"
        Write-Host "Runner OS: $env:RUNNER_OS"
        Write-Host "Runner Architecture: $env:RUNNER_ARCH"
        Write-Host "Windows runner - system info available"
    
    - name: Check system info (macOS)
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Runner OS: $RUNNER_OS"
        echo "Runner Architecture: $RUNNER_ARCH"
        echo "Available disk space:"
        df -h | head -3
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli
    
    - name: Build frontend
      shell: bash
      run: |
        echo "Starting frontend build..."
        npm run build
        echo "Frontend build completed successfully"
      timeout-minutes: 15
      env:
        NODE_ENV: production
    
    - name: Build Tauri app
      run: npm run tauri:build
      timeout-minutes: 20
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CARGO_INCREMENTAL: 0
        RUST_BACKTRACE: 1
    
    - name: Create Release
      id: create_release
      if: matrix.platform == 'macos-latest'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated build for VideoVault
          
          Platform: ${{ matrix.platform }}
          Build Number: ${{ github.run_number }}
        draft: false
        prerelease: false
    
    - name: List build artifacts
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        echo "Listing build artifacts..."
        find src-tauri/target/release -name "*.dmg" -o -name "*.app" | head -10
        ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
        ls -la src-tauri/target/release/bundle/dmg/ || echo "DMG directory not found"
        ls -la src-tauri/target/release/bundle/macos/ || echo "MacOS directory not found"
    
    - name: Find DMG file
      if: matrix.platform == 'macos-latest'
      id: find_dmg
      shell: bash
      run: |
        DMG_FILE=$(find src-tauri/target/release/bundle/dmg -name "*.dmg" | head -1)
        if [ -n "$DMG_FILE" ]; then
          echo "Found DMG file: $DMG_FILE"
          echo "dmg_path=$DMG_FILE" >> $GITHUB_OUTPUT
          echo "dmg_name=$(basename "$DMG_FILE")" >> $GITHUB_OUTPUT
        else
          echo "No DMG file found"
          exit 1
        fi
    
    - name: Upload DMG file
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_dmg.outputs.dmg_path }}
        asset_name: videovault-macos.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true
    
    - name: Create ZIP archive of APP bundle
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        cd src-tauri/target/release/bundle/macos
        zip -r videovault-macos.app.zip videovault.app
        echo "Created ZIP archive: videovault-macos.app.zip"
    
    - name: Upload APP bundle ZIP
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: src-tauri/target/release/bundle/macos/videovault-macos.app.zip
        asset_name: videovault-macos.app.zip
        asset_content_type: application/zip
      continue-on-error: true
    
    - name: Upload artifacts (fallback)
      uses: actions/upload-artifact@v4
      with:
        name: tauri-app-${{ matrix.platform }}
        path: src-tauri/target/release/
